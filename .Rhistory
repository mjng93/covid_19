group_by(bbb,gender) %>% summarise(`Total Number of Purchases`=sum(purch),`Average Number of Purchases`=mean(purch))
summarise(bbb %>% mutate(first_last=first-last),min=min(first_last),max=max(first_last),mean=mean(first_last))
group_by(subset(bbb,purch>=2),buyer) %>% summarise(n=n()) %>% mutate(percent=n/sum(n))
library(gmodels)
library(modelr)
library(janitor)
library(haven)
library(readxl)
library(knitr)
library(psych)
library(statar)
library(tidyverse)
# use load("filename.Rdata") for .Rdata files
load("bbb.Rdata")
tabyl(bbb,gender)
group_by(bbb,gender) %>% summarise(n=n()) %>% mutate(percent=n/sum(n))
ggplot(group_by(bbb,gender) %>% summarise(n=n()) %>% mutate(percent=n/sum(n)),aes(x=gender,y=percent)) +
geom_bar(stat="identity")
summarise(bbb,`Average Total $ Spent`=mean(total),`Average Total Book Purchases`=mean(purch),`Average Number of Months Since Last Purchase`=mean(last))
head(arrange(group_by(bbb,state) %>% summarise(`Number of Customers`=n()),-`Number of Customers`),3)
head(arrange(group_by(bbb,state) %>% summarise(count=n(),`Average Total Spending`=mean(total)),-count),3)
bbb %>%
select(book,nonbook) %>%
corr.test()
ggplot(slice(bbb,1:50), aes(x=book, y=nonbook)) +
geom_point()
ggplot(slice(bbb,1:50), aes(x=book, y=nonbook,color=gender)) +
geom_point()
totals=summarise(bbb,total=sum(purch),child=sum(child),youth=sum(youth),cook=sum(cook),do_it=sum(do_it),reference=sum(reference),art=sum(art),geog=sum(geog))
totals=t(totals)
colnames(totals)="Total Books Purchased"
print(totals)
print("Cook Books sold the most and Reference books sold the least")
group_by(bbb,gender,buyer) %>% summarise(n=n()) %>% mutate(percent=n/sum(n))
group_by(bbb,gender) %>% summarise(`Total Number of Purchases`=sum(purch),`Average Number of Purchases`=mean(purch))
summarise(bbb %>% mutate(first_last=first-last),min=min(first_last),max=max(first_last),mean=mean(first_last))
group_by(subset(bbb,purch>=2),buyer) %>% summarise(n=n()) %>% mutate(percent=n/sum(n))
library(shiny); runApp('C:/Users/micha/Dropbox/Files/Projects/covid_19/covid_19/covid_app.R')
runApp('C:/Users/micha/Dropbox/Files/Projects/covid_19/covid_19/covid_app.R')
runApp('C:/Users/micha/Dropbox/Files/Projects/covid_19/covid_19/covid_app.R')
library(shiny); runApp('C:/Users/micha/Dropbox/Files/Projects/covid_19/covid_19/covid_app.R')
runApp('C:/Users/micha/Dropbox/Files/Projects/covid_19/covid_19/covid_app.R')
library(gmodels)
library(modelr)
library(janitor)
library(haven)
library(readxl)
library(knitr)
library(psych)
library(statar)
library(tidyverse)
# use load("filename.Rdata") for .Rdata files
load("bbb.Rdata")
tabyl(bbb,gender)
group_by(bbb,gender) %>% summarise(n=n()) %>% mutate(percent=n/sum(n))
ggplot(group_by(bbb,gender) %>% summarise(n=n()) %>% mutate(percent=n/sum(n)),aes(x=gender,y=percent)) +
geom_bar(stat="identity")
summarise(bbb,`Average Total $ Spent`=mean(total),`Average Total Book Purchases`=mean(purch),`Average Number of Months Since Last Purchase`=mean(last))
head(arrange(group_by(bbb,state) %>% summarise(`Number of Customers`=n()),-`Number of Customers`),3)
head(arrange(group_by(bbb,state) %>% summarise(count=n(),`Average Total Spending`=mean(total)),-count),3)
bbb %>%
select(book,nonbook) %>%
corr.test()
ggplot(slice(bbb,1:50), aes(x=book, y=nonbook)) +
geom_point()
ggplot(slice(bbb,1:50), aes(x=book, y=nonbook,color=gender)) +
geom_point()
totals=summarise(bbb,total=sum(purch),child=sum(child),youth=sum(youth),cook=sum(cook),do_it=sum(do_it),reference=sum(reference),art=sum(art),geog=sum(geog))
totals=t(totals)
colnames(totals)="Total Books Purchased"
print(totals)
print("Cook Books sold the most and Reference books sold the least")
group_by(bbb,gender,buyer) %>% summarise(n=n()) %>% mutate(percent=n/sum(n))
group_by(bbb,gender) %>% summarise(`Total Number of Purchases`=sum(purch),`Average Number of Purchases`=mean(purch))
summarise(bbb %>% mutate(first_last=first-last),min=min(first_last),max=max(first_last),mean=mean(first_last))
group_by(subset(bbb,purch>=2),buyer) %>% summarise(n=n()) %>% mutate(percent=n/sum(n))
tabyl(bbb,gender) %>% kable()
exp(4.676)
exp(4.676)/100
exp(4.676)-1
tail(covid.kaggle)
source('C:/Users/micha/Dropbox/Files/Projects/covid_19/covid_19/covid.r')
setwd("C:/Users/micha/Dropbox/Files/Projects/covid_19/covid_19")
source('C:/Users/micha/Dropbox/Files/Projects/covid_19/covid_19/covid.r')
source('C:/Users/micha/Dropbox/Files/Projects/covid_19/covid_19/covid.r')
tail(covid,kaggle)
tail(covid.kaggle)
tail(covid.state)
cor(na.omit(covid.state[,c("Total Tests","Confirmed Cases")]))
cor(na.omit(covid.state[,c("Total Tests","Positive Tests")]))
ggplot(aes(x=Date,y=`Total Tests`,color=state_ab)) + geom_line()
ggplot(covid.state,aes(x=Date,y=`Total Tests`,color=state_ab)) + geom_line()
for (i in 1:length(unqiue(covid.state$state))){
assign(paste0("plot",i),ggplot(subset(covid.state,state==unique(covid.state$state)[i]),aes(x=Date)) + geom_line(aes(y='Total Tests',color='black')) +
geom_line(aes(y='Confirmed Cases',color='red'))
+ ggtitle("Confirmed Covid-19 Cases and Tests")
+ ylab("Total Cumulative")
)
}
for (i in 1:length(unique(covid.state$state))){
assign(paste0("plot",i),ggplot(subset(covid.state,state==unique(covid.state$state)[i]),aes(x=Date)) + geom_line(aes(y='Total Tests',color='black')) +
geom_line(aes(y='Confirmed Cases',color='red'))
+ ggtitle("Confirmed Covid-19 Cases and Tests")
+ ylab("Total Cumulative")
)
}
plot2
plot1
plot3
length(unique(covid.state$state))
unique(covid.state$state)
i=5
for (i in 1:length(unique(covid.state$state))){
assign(paste0("plot",i),ggplot(subset(covid.state,state==unique(covid.state$state)[i]),aes(x=Date)) + geom_line(aes(y='Total Tests',color='black')) +
geom_line(aes(y='Confirmed Cases',color='red'))
+ ggtitle(unique(covid.state$state)[i])
+ ylab("Total Cumulative")
)
}
plot5
subset(covid.state,state==unique(covid.state$state)[5])
i=5
assign(paste0("plot",i),ggplot(subset(covid.state,state==unique(covid.state$state)[i]),aes(x=Date)) + geom_line(aes(y='Total Tests',color='black')) +
geom_line(aes(y='Confirmed Cases',color='red'))
\q
i=5
assign(paste0("plot",i),ggplot(subset(covid.state,state==unique(covid.state$state)[i]),aes(x=Date)) + geom_line(aes(y='Total Tests',color='black')) +
geom_line(aes(y='Confirmed Cases',color='red'))
+ ggtitle(unique(covid.state$state)[i])
+ ylab("Total Cumulative")
)
plot5
subset(covid.state,state==unique(covid.state$state)[i])
prin(),ggplot(subset(covid.state,state==unique(covid.state$state)[i]),aes(x=Date)) + geom_line(aes(y='Total Tests',color='black')) +
geom_line(aes(y='Confirmed Cases',color='red'))
+ ggtitle(unique(covid.state$state)[i])
+ ylab("Total Cumulative")
)
print(ggplot(subset(covid.state,state==unique(covid.state$state)[i]),aes(x=Date)) + geom_line(aes(y='Total Tests',color='black')) +
geom_line(aes(y='Confirmed Cases',color='red'))
+ ggtitle(unique(covid.state$state)[i])
+ ylab("Total Cumulative")
)
prin(),ggplot(subset(covid.state,state==unique(covid.state$state)[i]),aes(x=Date)) + geom_line(aes(y='Total Tests',color='black'))
)
print(ggplot(subset(covid.state,state==unique(covid.state$state)[i]),aes(x=Date)) + geom_line(aes(y='Total Tests',color='black'))
)
subset(covid.state,state==unique(covid.state$state)[i])[,c("Date","Total Tests")]
for (i in 1:length(unique(covid.state$state))){
assign(paste0("plot",i),ggplot(subset(covid.state,state==unique(covid.state$state)[i]),aes(x=Date)) + geom_line(aes(y=`Total Tests`,color='black')) +
geom_line(aes(y=`Confirmed Cases`,color='red'))
+ ggtitle(unique(covid.state$state)[i])
+ ylab("Total Cumulative")
)
}
plot7
plot9
plot10
tail(covid.state)
for (i in 1:length(unique(covid.state$state))){
assign(paste0("plot",i),ggplot(subset(covid.state,state==unique(covid.state$state)[i]),aes(x=Date)) + geom_line(aes(y=`Total Tests`,color=`Total Tests`)) +
geom_line(aes(y=`Confirmed Cases`,color=`Confirmed Cases`))
+ ggtitle(unique(covid.state$state)[i])
+ ylab("Total Cumulative")
)
}
plot9
for (i in 1:length(unique(covid.state$state))){
assign(paste0("plot",i),ggplot(subset(covid.state,state==unique(covid.state$state)[i]),aes(x=Date)) + geom_line(aes(y=`Total Tests`,color="Total Tests")) +
geom_line(aes(y=`Confirmed Cases`,color='red'))
+ ggtitle(unique(covid.state$state)[i])
+ ylab("Total Cumulative")
)
}
plot 8
plot7
for (i in 1:length(unique(covid.state$state))){
assign(paste0("plot",i),ggplot(subset(covid.state,state==unique(covid.state$state)[i]),aes(x=Date)) + geom_line(aes(y=`Total Tests`,color="Total Tests")) +
geom_line(aes(y=`Confirmed Cases`,color='Confirmed Cases'))
+ ggtitle(unique(covid.state$state)[i])
+ ylab("Total Cumulative")
)
}
(paste0("plot",seq(0,53,1)))
for (i in 1:length(unique(covid.state$state))){
assign(paste0("plot",i),ggplot(subset(covid.state,state==unique(covid.state$state)[i]),aes(x=Date)) + geom_line(aes(y=`Total Tests`,color="Total Tests")) +
geom_line(aes(y=`Confirmed Cases`,color='Confirmed Cases'))
+ ggtitle(unique(covid.state$state)[i])
+ ylab("Total Cumulative")
)
}
grid.arrange(paste0("plot",seq(0,53,1)), ncol=2)
library(gridExtra)
grid.arrange(paste0("plot",seq(0,53,1)), ncol=2)
grid.arrange(get(paste0("plot",seq(0,53,1))), ncol=2)
grid.arrange(get(paste0("plot",seq(1,53,1))), ncol=2)
grid.arrange(plot1,plot2,plot3,plot4,ncol=2)
plot1
plot2
plot3
plot4
grid.arrange(plot1,plot3,plot4,plot5,ncol=2)
source('C:/Users/micha/Dropbox/Files/Projects/covid_19/covid_19/covid.r')
for (i in 1:length(unique(covid.state$state))){
assign(paste0("plot",i),ggplot(subset(covid.state,state==unique(covid.state$state)[i]),aes(x=Date)) + geom_line(aes(y=`Positive Tests`,color="Total Tests"))
+ geom_line(aes(y=`Confirmed Cases`,color='Confirmed Cases'))
+ ggtitle(unique(covid.state$state)[i])
+ ylab("Total Cumulative")
)
}
grid.arrange(plot1,plot3,plot4,plot5,ncol=2)
for (i in 1:length(unique(covid.state$state))){
assign(paste0("plot",i),ggplot(subset(covid.state,state==unique(covid.state$state)[i]),aes(x=Date)) + geom_line(aes(y=`Positive Tests`,color="Positive Tests"))
+ geom_line(aes(y=`Confirmed Cases`,color='Confirmed Cases'))
+ ggtitle(unique(covid.state$state)[i])
+ ylab("Total Cumulative")
)
}
grid.arrange(plot1,plot3,plot4,plot5,ncol=2)
for (i in 1:length(unique(covid.state$state))){
assign(paste0("plot",i),ggplot(subset(covid.state,state==unique(covid.state$state)[i]),aes(x=Date)) + geom_line(aes(y=`Total Tests`,color="Total Tests"))
+ geom_line(aes(y=`Confirmed Cases`,color='Confirmed Cases'))
+ ggtitle(unique(covid.state$state)[i])
+ ylab("Total Cumulative")
)
}
grid.arrange(plot1,plot3,plot4,plot5,ncol=2)
for (i in 1:length(unique(covid.state$state))){
assign(paste0("plot",i),ggplot(subset(covid.state,state==unique(covid.state$state)[i]),aes(x=Date)) + geom_line(aes(y=`Positive Tests`/`Total Tests`))
#+ geom_line(aes(y=`Confirmed Cases`,color='Confirmed Cases'))
+ ggtitle(paste0(unique(covid.state$state)[i]," - Positive Rate"))
+ ylab("Total Cumulative")
)
}
grid.arrange(plot1,plot3,plot4,plot5,ncol=2)
grid.arrange(get(paste0("plot",seq(1,53,1))), ncol=2)
grid.arrange(plot3,plot4,plot5,plot6,
plot3,plot4,plot5,plot6,
plot3,plot4,plot5,plot6,
plot3,plot4,plot5,plot6,
plot3,plot4,plot5,plot6,
ncol=2)
grid.arrange(plot3,plot4,plot5,plot6,
plot7,plot8,plot9,plot10,
plot11,plot12,plot13,plot14,
plot15,plot16,plot17,plot18,
ncol=2)
plots=list()
for (i in 1:length(unique(covid.state$state))){
plots[[i]]=ggplot(subset(covid.state,state==unique(covid.state$state)[i]),aes(x=Date)) + geom_line(aes(y=`Positive Tests`/`Total Tests`))
#+ geom_line(aes(y=`Confirmed Cases`,color='Confirmed Cases'))
+ ggtitle(paste0(unique(covid.state$state)[i]," - Positive Rate"))
+ ylab("Total Cumulative")
}
plots=list()
for (i in 1:length(unique(covid.state$state))){
plots[[i]]=ggplot(subset(covid.state,state==unique(covid.state$state)[i]),aes(x=Date)) + geom_line(aes(y=`Positive Tests`/`Total Tests`))
#+ geom_line(aes(y=`Confirmed Cases`,color='Confirmed Cases'))
+ ggtitle(paste0(unique(covid.state$state)[i]," - Positive Rate"))
+ ylab("Total Cumulative")
}
plots=list()
for (i in 1:length(unique(covid.state$state))){
plots[[i]]=ggplot(subset(covid.state,state==unique(covid.state$state)[i]),aes(x=Date)) + geom_line(aes(y=`Positive Tests`/`Total Tests`))
#+ geom_line(aes(y=`Confirmed Cases`,color='Confirmed Cases'))
#+ ggtitle(paste0(unique(covid.state$state)[i]," - Positive Rate"))
+ ylab("Total Cumulative")
}
plots=list()
for (i in 1:length(unique(covid.state$state))){
plots[[i]]= ggplot(subset(covid.state,state==unique(covid.state$state)[i]),aes(x=Date)) + geom_line(aes(y=`Positive Tests`/`Total Tests`)) + ggtitle(paste0(unique(covid.state$state)[i]," - Positive Rate")) + ylab("Total Cumulative")
#+ geom_line(aes(y=`Confirmed Cases`,color='Confirmed Cases'))
#+ ggtitle(paste0(unique(covid.state$state)[i]," - Positive Rate"))
}
grid.arrange(plots[[1:6]],ncol=2)
plots[[1]]
plots[[2]]
plots[[3]]
grid.arrange(plots[[10:20]],ncol=2)
grid.arrange(plots[10:20],ncol=2)
grid.arrange(plots[[10:20]],ncol=2)
grid.arrange(plots[[1]],ncol=2)
library(shiny); runApp('covid_app.R')
install.packages(c("backports", "broom", "dbplyr", "devtools", "fs", "glue", "gtools", "isoband", "janitor", "lme4", "lubridate", "pkgbuild", "plotly", "purrr", "quantreg", "Rcpp", "RCurl", "reshape2", "rex", "sfsmisc", "survey", "tibble", "tinytex", "usethis", "withr", "xfun", "xml2"))
Sys.timezone()
source('C:/Users/micha/Dropbox/Files/Projects/covid_19/covid_19/covid.r')
### Determine notebook defaults:
knitr::opts_chunk$set(echo=TRUE,      # Print all the code in all the chunks
warning=FALSE,  # Don't print warning statements
message=FALSE,  # Don't print other R output messages
comment=NA)     # Helps produce prettier output
### Load packages:
library(gmodels)
library(modelr)
library(janitor)
library(haven)
library(readxl)
library(knitr)
library(psych)
library(statar)
library(tidyverse)
library(mktg482)
load("bbb.Rdata")
head(bbb)
colnames(bbb)
bbb.logit=glm(buyer~gender+last+total+child+youth+cook+do_it+refernce+art+geog,data=bbb,family=binomial(link='logit'))
bbb.logit=glm(buyer~gender+last+total+child+youth+cook+do_it+reference+art+geog,data=bbb,family=binomial(link='logit'))
bbb.logit=glm(buyer~gender+last+total+child+youth+cook+do_it+reference+art+geog,data=bbb,family=binomial(link='logit'))
summary(bbb.logit)
plot_model(bbb.logit, show.values = TRUE, transform = NULL)
bbb.logit=glm(buyer~gender+last+total+child+youth+cook+do_it+reference+art+geog,data=bbb,family=binomial(link='logit'))
summary(bbb.logit)
plot_model(bbb.logit, show.values = TRUE, transform = NULL)
?plot_model
library(sjPlot)
install.packages('sjPlot')
library(sjPlot)
plot_model(bbb.logit, show.values = TRUE, transform = NULL)
plot_model(bbb.logit, show.values = TRUE, transform = NULL)
### Determine notebook defaults:
knitr::opts_chunk$set(echo=TRUE,      # Print all the code in all the chunks
warning=FALSE,  # Don't print warning statements
message=FALSE,  # Don't print other R output messages
comment=NA)     # Helps produce prettier output
### Load packages:
library(gmodels)
library(modelr)
library(janitor)
library(haven)
library(readxl)
library(knitr)
library(psych)
library(statar)
library(tidyverse)
library(mktg482)
library(sjPlot)
load("bbb.Rdata")
bbb.logit=glm(buyer~gender+last+total+child+youth+cook+do_it+reference+art+geog,data=bbb,family=binomial(link='logit'))
summary(bbb.logit)
plot_model(bbb.logit, show.values = TRUE, transform = NULL)
?plot_model
plot_model(bbb.logit, show.values = TRUE, transform = NULL,type='eff')
plot_model(bbb.logit, type='eff')
rm(list=ls())
plot_model(bbb.logit, type='eff')
### Determine notebook defaults:
knitr::opts_chunk$set(echo=TRUE,      # Print all the code in all the chunks
warning=FALSE,  # Don't print warning statements
message=FALSE,  # Don't print other R output messages
comment=NA)     # Helps produce prettier output
### Load packages:
library(gmodels)
library(modelr)
library(janitor)
library(haven)
library(readxl)
library(knitr)
library(psych)
library(statar)
library(tidyverse)
library(mktg482)
library(sjPlot)
load("bbb.Rdata")
bbb.logit=glm(buyer~gender+last+total+child+youth+cook+do_it+reference+art+geog,data=bbb,family=binomial(link='logit'))
summary(bbb.logit)
plot_model(bbb.logit, show.values = TRUE, transform = NULL)
plot_model(bbb.logit, type='eff')
quantile(bbb$geog,seq(0,1,.1))
bbb <- bbb %>%
mutate(probability = predict(bbb.logit,
newdata = bbb,
type = "response"))
head(bbb)
View(bbb)
bbb <- bbb %>%
mutate(probability = predict(bbb.logit,
newdata = bbb,
type = "response"))
bbb %>% summarise(mean(buyer),mean(predicted))
bbb <- bbb %>%
mutate(probability = predict(bbb.logit,
newdata = bbb,
type = "response"))
bbb %>% summarise(mean(buyer),mean(probability))
View(bbb)
nrow(bbb)
bbb <- bbb %>%
mutate(rec_quin_i = ntile(recency, 10))
bbb <- bbb %>%
mutate(pred_dec = ntile(probability, 10))
View(bbb)
quantile(bbb$probability,seq(0,1,.1))
bbb <- bbb %>%
mutate(pred_dec = ntile(-probability, 10))
bbb%>%
group_by(pred_dec) %>%
summarise(perc_buyer=mean(buyer)) %>%
ggplot() + geom_col(aes(x = pred_dec, y = perc_buyer))
bbb %>%
group_by(pred_dec) %>%
summarise(`# of Customers`=n(),`# of Buyers`=sum(buyer),`Response Rate`=mean(buyer))
1935/5000
write.csv(lift.data,'lift.data.csv',row.names = FALSE)
lift.data = bbb %>%
group_by(pred_dec) %>%
summarise(`# of Customers`=n(),`# of Buyers`=sum(buyer),`Response Rate`=mean(buyer))
write.csv(lift.data,'lift.data.csv',row.names = FALSE)
0.5*(18-9-3)
0.5/(18-9-3)
bbb = bbb %>% mutate(target=1*(probability>0.083))
View(bbb)
sum(bbb$target)
bbb %>% group_by(target) %>% summarise(mean(buyer))
mean(bbb$target)
bbb %>% group_by(target) %>% summarise(mean(buyer))
bbb %>%
filter(target==1) %>%
summarise(frac_mailed=n()/nrow(bbb), resp_rate=mean(buyer),
profit=(resp_rate*500000*frac_mailed*(18-9-3))
-(0.5*frac_mailed*500000),
roi=profit/(0.5*frac_mailed*500000))
(18-9-3)*mean(bbb$buyer)-0.5*500000
(18-9-3)*mean(bbb$buyer)*500000-0.5*500000
bbb %>%
filter(target==1) %>%
summarise(frac_mailed=n()/nrow(bbb), resp_rate=mean(buyer),
profit=(resp_rate*500000*frac_mailed*(18-9-3))
-(0.5*frac_mailed*500000),
roi=profit/(0.5*frac_mailed*500000),
mass_mailing_profit=(18-9-3)*mean(bbb$buyer)*500000-0.5*500000,
mass_mailing_roi=mass_mailing_profit/(0.5*500000))
121570-21320
### Determine notebook defaults:
knitr::opts_chunk$set(echo=TRUE,      # Print all the code in all the chunks
warning=FALSE,  # Don't print warning statements
message=FALSE,  # Don't print other R output messages
comment=NA)     # Helps produce prettier output
### Load packages:
library(gmodels)
library(modelr)
library(janitor)
library(haven)
library(readxl)
library(knitr)
library(psych)
library(statar)
library(tidyverse)
library(mktg482)
library(sjPlot)
load("bbb.Rdata")
bbb.logit=glm(buyer~gender+last+total+child+youth+cook+do_it+reference+art+geog,data=bbb,family=binomial(link='logit'))
summary(bbb.logit)
plot_model(bbb.logit, show.values = TRUE, transform = NULL)
plot_model(bbb.logit, type='eff')
bbb <- bbb %>%
mutate(probability = predict(bbb.logit,
newdata = bbb,
type = "response"))
bbb %>% summarise(mean(buyer),mean(probability))
bbb <- bbb %>%
mutate(pred_dec = ntile(-probability, 10))
bbb%>%
group_by(pred_dec) %>%
summarise(perc_buyer=mean(buyer)) %>%
ggplot() + geom_col(aes(x = pred_dec, y = perc_buyer))
lift.data = bbb %>%
group_by(pred_dec) %>%
summarise(`# of Customers`=n(),`# of Buyers`=sum(buyer),`Response Rate`=mean(buyer))
write.csv(lift.data,'lift.data.csv',row.names = FALSE)
include_graphics("lift_chart")
include_graphics("lift_chart.pdf")
include_graphics("gains_chart.pdf")
0.5/(18-9-3)
bbb = bbb %>% mutate(target=1*(probability>0.083))
mean(bbb$target)
bbb %>% group_by(target) %>% summarise(mean(buyer))
bbb %>%
filter(target==1) %>%
summarise(frac_mailed=n()/nrow(bbb), resp_rate=mean(buyer),
profit=(resp_rate*500000*frac_mailed*(18-9-3))
-(0.5*frac_mailed*500000),
roi=profit/(0.5*frac_mailed*500000))
bbb %>%
filter(target==1) %>%
summarise(frac_mailed=n()/nrow(bbb), resp_rate=mean(buyer),
profit=(resp_rate*500000*frac_mailed*(18-9-3))
-(0.5*frac_mailed*500000),
roi=profit/(0.5*frac_mailed*500000),
mass_mailing_profit=(18-9-3)*mean(bbb$buyer)*500000-0.5*500000,
mass_mailing_roi=mass_mailing_profit/(0.5*500000))
confint.default(bbb.logit)
plot_grid(list(plot_model(bbb.logit, type='eff')))
plot_model(bbb.logit, type='eff',grid=TRUE)
grid.arrange(plot_model(bbb.logit, type='eff'),ncol=2)
?grid.arrange
library(ggplot2)
grid.arrange(plot_model(bbb.logit, type='eff'),ncol=2)
?grid.arrange
grid.arrange
library(gridExtra)
grid.arrange(plot_model(bbb.logit, type='eff'),ncol=2)
grid.arrange(plot_model(bbb.logit, type='eff'),ncol=2)
test=plot_model(bbb.logit, type='eff')
class(test)
tail(test)
length(test)
grid.arrange(list(plot_model(bbb.logit, type='eff')),ncol=2)
class(test$youth)
grid.arrange(list(plot_model(bbb.logit, type='eff')),ncol=2,top='Marginal Effects')
par(mfrow = c(1, 2))
plot_model(bbb.logit, type='eff')
dev.off()
